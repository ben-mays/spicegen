// Code generated by spicegen. DO NOT EDIT
package {{.PackageName}}

import (
    "errors"
    "context"
	pb "github.com/authzed/authzed-go/proto/authzed/api/v1"
	structpb "google.golang.org/protobuf/types/known/structpb"
	{{ $import := .ImportPath }}
	{{ range $rsc := .Resources }}{{ if $rsc.Relations }}"{{ $import }}/permissions/{{ $rsc.Name }}"{{end}}
	{{end}}
)

{{/* Create a ResourceType for each resource */}}
type ResourceType string
const (
{{ range $rsc := .Resources }}{{ $rsc.Name | ToCamel }} ResourceType = "{{ $rsc.Name }}"
{{ end }}
)

type Resource interface {
	ResourceType() ResourceType
	ID() string
}

func NewResource(resourceType ResourceType, ID string) (Resource, error) {
    switch resourceType {
        {{ range $rsc := .Resources }}{{ $resource := $rsc.Name | ToCamel }}
        case {{$resource}}: return {{ $resource }}Resource{rid: ID}, nil
        {{end}}
    }
    return nil, errors.New("resourceType given is not valid")
}


{{/* For each resource type, create a concrete struct */}}
{{ range $rsc := .Resources }}{{ $resource := $rsc.Name | ToCamel }}
type {{ $resource }}Resource struct {
	rid string
}

func (r {{ $resource }}Resource) ID() string {
	return r.rid
}

func (r {{ $resource }}Resource) ResourceType() ResourceType {
	return {{ $resource }}
}

func New{{ $resource }}Resource(ID string) {{ $resource }}Resource {
	return {{ $resource }}Resource{rid: ID}
}
{{end}}
{{$InterfaceName := .InterfaceName}}
type {{$InterfaceName}} interface {
	{{ range $rsc := .Resources }}{{ $resource := $rsc.Name | ToCamel }}{{ if $rsc.Permissions }}{{ $subjectType := $rsc.PermissionSubjectType | ToCamel }} 
	Check{{ $resource }}Permission(ctx context.Context, subject {{ $subjectType }}, permission {{ $rsc.Name }}.{{ $resource }}Permission, resource {{ $resource }}Resource, opts *CheckPermissionOptions) (bool, error){{ end }}{{ end}}
	{{ range $rsc := .Resources }}{{ $resource := $rsc.Name | ToCamel }}{{ if $rsc.Relations }}{{ $subjectType := $rsc.RelationSubjectType | ToCamel }}
	Add{{ $resource }}Relationship(ctx context.Context, resource {{ $resource }}Resource, relation {{ $rsc.Name }}.{{ $resource }}Relation, subject {{ $subjectType }}, opts *AddRelationshipOptions) error{{ end }}{{ end}}
	{{ range $rsc := .Resources }}{{ $resource := $rsc.Name | ToCamel }} {{ if $rsc.Relations }} {{ $subjectType := $rsc.RelationSubjectType | ToCamel }}
	Delete{{ $resource }}Relationship(ctx context.Context, resource {{ $resource }}Resource, relation {{ $rsc.Name }}.{{ $resource }}Relation, subject {{ $subjectType }}, opts *DeleteRelationshipOptions) error{{ end }}{{ end}}
	{{ range $rsc := .Resources }}{{ $resource := $rsc.Name | ToCamel }}{{ if $rsc.Permissions }} {{ $subjectType := $rsc.PermissionSubjectType | ToCamel }}
	Lookup{{ $resource }}Resources(ctx context.Context, subject {{ $subjectType }}, permission {{ $rsc.Name }}.{{ $resource }}Permission, opts *LookupResourcesOptions)  ([]string, string, error)
	Lookup{{ $resource }}Subjects(ctx context.Context, resourceID string, subjectType ResourceType, permission {{ $rsc.Name }}.{{ $resource }}Permission, opts *LookupSubjectsOptions) ([]string, string, error) {{ end }}{{ end}}
}

type CheckPermissionOptions struct {
	Context *structpb.Struct
}

type AddRelationshipOptions struct {
	Caveat *pb.ContextualizedCaveat
	OptionalSubjectRelation string
}

type DeleteRelationshipOptions struct {
	Pagination Pagination
	OptionalSubjectRelation string
}

type LookupResourcesOptions struct {
	Pagination Pagination
	OptionalSubjectRelation string
}

type LookupSubjectsOptions struct {
	Pagination Pagination
	OptionalSubjectRelation string
}

type Pagination struct {
	Limit int
	Token string
}