// Code generated by spicegen. DO NOT EDIT
package authz

import (
	"context"
	"errors"
	"fmt"
	"sync"

	pb "github.com/authzed/authzed-go/proto/authzed/api/v1"
	structpb "google.golang.org/protobuf/types/known/structpb"

	"github.com/ben-mays/spicegen/_examples/permissions/document"
	"github.com/ben-mays/spicegen/_examples/permissions/organization"
)

type ResourceType string

const (
	User         ResourceType = "user"
	Organization ResourceType = "organization"
	Document     ResourceType = "document"
)

type Resource interface {
	ResourceType() ResourceType
	ID() string
}

type UserResource struct {
	rid string
}

func (r UserResource) ID() string {
	return r.rid
}

func (r UserResource) ResourceType() ResourceType {
	return User
}

func NewUserResource(ID string) UserResource {
	return UserResource{rid: ID}
}

type OrganizationResource struct {
	rid string
}

func (r OrganizationResource) ID() string {
	return r.rid
}

func (r OrganizationResource) ResourceType() ResourceType {
	return Organization
}

func NewOrganizationResource(ID string) OrganizationResource {
	return OrganizationResource{rid: ID}
}

type DocumentResource struct {
	rid string
}

func (r DocumentResource) ID() string {
	return r.rid
}

func (r DocumentResource) ResourceType() ResourceType {
	return Document
}

func NewDocumentResource(ID string) DocumentResource {
	return DocumentResource{rid: ID}
}

type SpicedbClient interface {
	pb.PermissionsServiceClient
	pb.SchemaServiceClient
}

// Client is a SpiceDB client that can be used to check permissions on resources. It is safe for concurrent use.
type Client struct {
	sync.RWMutex

	spicedbClient SpicedbClient
	// Lock protects lastZedToken from
	lastZedToken string
}

func NewClient(spicedbClient SpicedbClient) *Client {
	return &Client{
		spicedbClient: spicedbClient,
	}
}

type CheckPermissionOptions struct {
	Context     *structpb.Struct
	Consistency *pb.Consistency
}

func (c *Client) getConsistency() *pb.Consistency {
	return &pb.Consistency{Requirement: &pb.Consistency_AtLeastAsFresh{AtLeastAsFresh: &pb.ZedToken{Token: c.lastZedToken}}}
}

func (c *Client) CheckPermission(ctx context.Context, subject Resource, permission string, resource Resource, opts *CheckPermissionOptions) (bool, error) {
	c.RLock()
	defer c.RUnlock()
	var consistency *pb.Consistency
	var context *structpb.Struct
	if opts != nil {
		consistency = opts.Consistency
		context = opts.Context
	}
	if consistency == nil {
		if c.lastZedToken != "" {
			consistency = c.getConsistency()
		}
	}
	resp, err := c.spicedbClient.CheckPermission(ctx, &pb.CheckPermissionRequest{
		Consistency: consistency,
		Context:     context,
		Subject: &pb.SubjectReference{
			Object: &pb.ObjectReference{ObjectType: string(subject.ResourceType()), ObjectId: subject.ID()},
		},
		Permission: permission,
		Resource:   &pb.ObjectReference{ObjectType: string(resource.ResourceType()), ObjectId: resource.ID()},
	})
	if err != nil {
		return false, err
	}
	c.lastZedToken = resp.CheckedAt.Token
	return resp.Permissionship == pb.CheckPermissionResponse_PERMISSIONSHIP_HAS_PERMISSION, nil
}

func (c *Client) CheckOrganizationPermission(ctx context.Context, resource OrganizationResource, permission organization.OrganizationPermission, subject UserResource, opts *CheckPermissionOptions) (bool, error) {
	if organization.ALLOWED_PERMISSION_SUBJECT_TYPES[permission][string(subject.ResourceType())] || organization.ALLOWED_PERMISSION_SUBJECT_TYPES[permission]["*"] {
		return c.CheckPermission(ctx, subject, string(permission), resource, opts)
	} else {
		return false, errors.New(fmt.Sprintf("subject type not allowed for permission %s", string(permission)))
	}
}

func (c *Client) CheckDocumentPermission(ctx context.Context, resource DocumentResource, permission document.DocumentPermission, subject Resource, opts *CheckPermissionOptions) (bool, error) {
	if document.ALLOWED_PERMISSION_SUBJECT_TYPES[permission][string(subject.ResourceType())] || document.ALLOWED_PERMISSION_SUBJECT_TYPES[permission]["*"] {
		return c.CheckPermission(ctx, subject, string(permission), resource, opts)
	} else {
		return false, errors.New(fmt.Sprintf("subject type not allowed for permission %s", string(permission)))
	}
}

type AddRelationshipOptions struct {
	Caveat *pb.ContextualizedCaveat
}

func (c *Client) AddRelationship(ctx context.Context, resource Resource, relation string, subject Resource, opts *AddRelationshipOptions) (bool, error) {
	c.Lock()
	defer c.Unlock()
	var caveat *pb.ContextualizedCaveat
	if opts != nil {
		caveat = opts.Caveat
	}
	resp, err := c.spicedbClient.WriteRelationships(ctx, &pb.WriteRelationshipsRequest{
		Updates: []*pb.RelationshipUpdate{{
			Operation: pb.RelationshipUpdate_OPERATION_TOUCH,
			Relationship: &pb.Relationship{
				Subject: &pb.SubjectReference{
					Object: &pb.ObjectReference{
						ObjectType: string(subject.ResourceType()),
						ObjectId:   subject.ID(),
					},
				},
				Relation: relation,
				Resource: &pb.ObjectReference{
					ObjectType: string(resource.ResourceType()),
					ObjectId:   resource.ID(),
				},
				OptionalCaveat: caveat,
			},
		}},
	})
	if err != nil {
		return false, err
	}
	c.lastZedToken = resp.WrittenAt.Token
	return true, nil
}

func (c *Client) AddOrganizationRelationship(ctx context.Context, resource OrganizationResource, relation organization.OrganizationRelation, subject UserResource, opts *AddRelationshipOptions) (bool, error) {
	if organization.ALLOWED_RELATION_SUBJECT_TYPES[relation][string(subject.ResourceType())] || organization.ALLOWED_RELATION_SUBJECT_TYPES[relation]["*"] {
		return c.AddRelationship(ctx, resource, string(relation), subject, opts)
	} else {
		return false, errors.New(fmt.Sprintf("subject type not allowed for relation %s", string(relation)))
	}
}

func (c *Client) AddDocumentRelationship(ctx context.Context, resource DocumentResource, relation document.DocumentRelation, subject Resource, opts *AddRelationshipOptions) (bool, error) {
	if document.ALLOWED_RELATION_SUBJECT_TYPES[relation][string(subject.ResourceType())] || document.ALLOWED_RELATION_SUBJECT_TYPES[relation]["*"] {
		return c.AddRelationship(ctx, resource, string(relation), subject, opts)
	} else {
		return false, errors.New(fmt.Sprintf("subject type not allowed for relation %s", string(relation)))
	}
}

func (c *Client) DeleteRelationship(ctx context.Context, resource Resource, relation string, subject Resource) (bool, error) {
	c.Lock()
	defer c.Unlock()
	resp, err := c.spicedbClient.DeleteRelationships(ctx, &pb.DeleteRelationshipsRequest{
		RelationshipFilter: &pb.RelationshipFilter{ResourceType: string(resource.ResourceType()), OptionalResourceId: resource.ID(), OptionalRelation: relation, OptionalSubjectFilter: &pb.SubjectFilter{SubjectType: string(subject.ResourceType()), OptionalSubjectId: subject.ID()}},
	})
	if err != nil {
		return false, err
	}
	c.lastZedToken = resp.DeletedAt.Token
	return true, nil
}

func (c *Client) DeleteOrganizationRelationship(ctx context.Context, resource OrganizationResource, relation organization.OrganizationRelation, subject UserResource) (bool, error) {
	return c.DeleteRelationship(ctx, resource, string(relation), subject)
}

func (c *Client) DeleteDocumentRelationship(ctx context.Context, resource DocumentResource, relation document.DocumentRelation, subject Resource) (bool, error) {
	return c.DeleteRelationship(ctx, resource, string(relation), subject)
}
